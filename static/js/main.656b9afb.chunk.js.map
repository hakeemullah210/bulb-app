{"version":3,"sources":["logo.svg","Components/Bulb.jsx","Components/BulbOff.jsx","Components/BulbOn.jsx","Components/BulbBroken.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Bulb","react_default","a","createElement","src","width","this","props","height","Component","BulbOff","alt","BulbOn","BulbBroken","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","toggle","bulb","Func","bind","assertThisInitialized","e","setState","_this2","_this$state","className","console","log","Components_Bulb","Components_BulbOn","Components_BulbOff","Components_BulbBroken","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCczBC,gMARP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAJL,yFAImBC,MAAOC,KAAKC,MAAMF,MAAOG,OAAQF,KAAKC,MAAMC,iBAN5DC,cCWJC,mLAPP,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAJL,yFAImBO,IAAI,GAAGN,MAAOC,KAAKC,MAAMF,MAAOG,OAAQF,KAAKC,MAAMC,iBANhEC,aCWPG,mLAPP,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAJN,2IAImBO,IAAI,GAAGN,MAAOC,KAAKC,MAAMF,MAAOG,OAAQF,KAAKC,MAAMC,iBANhEC,aCWNI,mLAPP,OACIZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAJA,iFAIiBO,IAAI,GAAGN,MAAOC,KAAKC,MAAMF,MAAOG,OAAQF,KAAKC,MAAMC,iBAN9DC,aCgDVK,cAxCb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KACDc,MAAQ,CACXC,QAAQ,EACRC,KAAM,IAERR,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANKA,oEASdY,GAEHrB,KAAKsB,SAAS,CAAEL,KAAMI,IACtBrB,KAAKsB,SAAS,CAAEN,QAAQ,qCAIjB,IAAAO,EAAAvB,KAAAwB,EACkBxB,KAAKe,MAAtBE,EADDO,EACCP,KAAMD,EADPQ,EACOR,OACd,OACErB,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OAGZC,QAAQC,IAAI3B,KAAKe,MAAME,MACvBD,GAAUrB,EAAAC,EAAAC,cAAC+B,EAAD,CAAM7B,MAAM,QAAQG,OAAO,UAC5B,OAATe,GAAiBtB,EAAAC,EAAAC,cAACgC,EAAD,CAAQ9B,MAAM,QAAQG,OAAO,UACrC,QAATe,GAAkBtB,EAAAC,EAAAC,cAACiC,EAAD,CAAS/B,MAAM,QAAQG,OAAO,UACvC,UAATe,GAAoBtB,EAAAC,EAAAC,cAACkC,EAAD,CAAYhC,MAAM,QAAQG,OAAO,UAC9DP,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,UAAQmC,QAAS,kBAAMT,EAAKL,KAAK,QAAjC,MACAvB,EAAAC,EAAAC,cAAA,UAAQmC,QAAS,kBAAMT,EAAKL,KAAK,SAAjC,OACAvB,EAAAC,EAAAC,cAAA,UAAQmC,QAAS,kBAAMT,EAAKL,KAAK,WAAjC,iBA/BUf,aCGE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.656b9afb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\n\r\nclass Bulb extends Component{\r\n    render(){\r\n    let bulbOff='https://www.industrytap.com/wp-content/uploads/2016/02/incandescent-e1456179151174.jpg'\r\n\r\n        return(\r\n            <div>\r\n                <img src={bulbOff} width={this.props.width} height={this.props.height}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Bulb;","import React, {Component} from 'react'\r\n\r\nclass BulbOff extends Component{\r\n    render(){\r\n    let bulbOff='https://www.industrytap.com/wp-content/uploads/2016/02/incandescent-e1456179151174.jpg'\r\n\r\n        return(\r\n            <div>\r\n                <img src={bulbOff} alt=\"\" width={this.props.width} height={this.props.height}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default BulbOff;","import React, {Component} from 'react'\r\n\r\nclass BulbOn extends Component{\r\n    render(){\r\n    let bulbOn='https://img.purch.com/w/660/aHR0cDovL3d3dy5saXZlc2NpZW5jZS5jb20vaW1hZ2VzL2kvMDAwLzAwMi83NTkvb3JpZ2luYWwvMDgxMjA5LWxpZ2h0LWJ1bGItMDIuanBn'\r\n\r\n        return(\r\n            <div>\r\n                <img src={bulbOn} alt=\"\" width={this.props.width} height={this.props.height}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default BulbOn;","import React, {Component} from 'react'\r\n\r\nclass BulbBroken extends Component{\r\n    render(){\r\n    let bulbBroken='https://media.istockphoto.com/vectors/brokendown-light-bulb-vector-id164446736'\r\n\r\n        return(\r\n            <div>\r\n              <img src={bulbBroken} alt=\"\" width={this.props.width} height={this.props.height}/>  \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default BulbBroken;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Bulb from './Components/Bulb.jsx'\nimport BulbOff from './Components/BulbOff.jsx'\nimport BulbOn from './Components/BulbOn.jsx'\nimport BulbBroken from './Components/BulbBroken.jsx'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggle: true,\n      bulb: ''\n    }\n    this.Func = this.Func.bind(this)\n  }\n\n  Func(e) {\n    // console.log(e)\n    this.setState({ bulb: e })\n    this.setState({ toggle: false })\n    // console.log(this.state.bulb)\n  }\n\n  render() {\n    const { bulb, toggle } = this.state\n    return (\n      <div className=\"App\">\n\n\n        {console.log(this.state.bulb)}\n        {toggle && <Bulb width='300px' height='400px' />}\n        {bulb === 'on' && <BulbOn width='300px' height='400px' />}\n        {bulb === 'off' && <BulbOff width='300px' height='400px' />}\n        {bulb === 'break' && <BulbBroken width='260px' height='400px' />}\n<br/>\n        <button onClick={() => this.Func('on')}>ON</button>\n        <button onClick={() => this.Func('off')}>OFF</button>\n        <button onClick={() => this.Func('break')}>Break</button>\n\n\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}